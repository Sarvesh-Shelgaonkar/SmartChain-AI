"use client"

import { useState } from "react"
import { ArrowLeft, FileText, Download, Calendar, Filter, Eye, X } from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { ProtectedRoute } from "@/components/protected-route"
import Link from "next/link"

const reportsData = [
  {
    id: 1,
    name: "Monthly Inventory Report",
    type: "Inventory",
    date: "2024-06-25",
    status: "Generated",
    size: "2.4 MB",
  },
  {
    id: 2,
    name: "Supplier Performance Q2",
    type: "Suppliers",
    date: "2024-06-20",
    status: "Generated",
    size: "1.8 MB",
  },
  {
    id: 3,
    name: "Delivery Analytics June",
    type: "Logistics",
    date: "2024-06-18",
    status: "Processing",
    size: "-",
  },
  {
    id: 4,
    name: "Cost Analysis Report",
    type: "Finance",
    date: "2024-06-15",
    status: "Generated",
    size: "3.2 MB",
  },
]

export default function ReportsPage() {
  const [reportType, setReportType] = useState("")
  const [dateRange, setDateRange] = useState("")
  const [viewingReport, setViewingReport] = useState<any>(null)

  const handleDownload = (report: any) => {
    // Simulate file download
    const element = document.createElement('a')
    const file = new Blob([generateReportContent(report)], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = `${report.name.replace(/\s+/g, '_')}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  const handleViewReport = (report: any) => {
    setViewingReport(report)
  }

  const generateReportContent = (report: any) => {
    return `SMARTCHAIN AI - ${report.name.toUpperCase()}
Generated on: ${report.date}
Status: ${report.status}
Size: ${report.size}

=== EXECUTIVE SUMMARY ===
This report provides comprehensive analysis of ${report.type.toLowerCase()} operations.

=== KEY METRICS ===
- Total Transactions: 2,847
- Revenue Generated: Rs.45,23,100
- Cost Savings: Rs.8,47,500
- Efficiency Score: 94.2%

=== DETAILED ANALYSIS ===
${report.type === 'Inventory' ? 'INVENTORY ANALYSIS: Total SKUs: 12, Critical Items: 3' : ''}
${report.type === 'Suppliers' ? 'SUPPLIER ANALYSIS: Total Suppliers: 7, Avg Performance: 91.2%' : ''}

=== RECOMMENDATIONS ===
1. Implement automated reordering for critical items
2. Diversify supplier base to reduce dependency
3. Optimize delivery routes using AI predictions

Report generated by SmartChain AI Analytics Engine`
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "Generated":
        return <Badge variant="secondary">Generated</Badge>
      case "Processing":
        return <Badge variant="default">Processing</Badge>
      case "Failed":
        return <Badge variant="destructive">Failed</Badge>
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  return (
    <ProtectedRoute requiredPermission="view_analytics">
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4">
        {/* Header */}
        <div className="mb-6">
          <div className="flex items-center space-x-4 mb-4">
            <Link href="/dashboard">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
            </Link>
            <div className="flex items-center space-x-2">
              <FileText className="h-6 w-6 text-blue-600" />
              <h1 className="text-2xl font-bold text-gray-900">Reports & Documents</h1>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Generate New Report */}
          <Card className="lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <FileText className="h-5 w-5" />
                <span>Generate New Report</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="report-type">Report Type</Label>
                <Select value={reportType} onValueChange={setReportType}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select report type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="inventory">Inventory Report</SelectItem>
                    <SelectItem value="suppliers">Supplier Performance</SelectItem>
                    <SelectItem value="deliveries">Delivery Analytics</SelectItem>
                    <SelectItem value="finance">Financial Analysis</SelectItem>
                    <SelectItem value="sustainability">Sustainability Report</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="date-range">Date Range</Label>
                <Select value={dateRange} onValueChange={setDateRange}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select date range" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="last-7-days">Last 7 Days</SelectItem>
                    <SelectItem value="last-30-days">Last 30 Days</SelectItem>
                    <SelectItem value="last-quarter">Last Quarter</SelectItem>
                    <SelectItem value="last-year">Last Year</SelectItem>
                    <SelectItem value="custom">Custom Range</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid grid-cols-2 gap-2">
                <div>
                  <Label htmlFor="start-date">Start Date</Label>
                  <Input id="start-date" type="date" />
                </div>
                <div>
                  <Label htmlFor="end-date">End Date</Label>
                  <Input id="end-date" type="date" />
                </div>
              </div>

              <Button className="w-full">
                <FileText className="h-4 w-4 mr-2" />
                Generate Report
              </Button>
            </CardContent>
          </Card>

          {/* Recent Reports */}
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Recent Reports</span>
                <div className="flex items-center space-x-2">
                  <Button variant="outline" size="sm">
                    <Filter className="h-4 w-4 mr-2" />
                    Filter
                  </Button>
                  <Button variant="outline" size="sm">
                    <Calendar className="h-4 w-4 mr-2" />
                    Date Range
                  </Button>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Report Name</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Size</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {reportsData.map((report) => (
                    <TableRow key={report.id}>
                      <TableCell className="font-medium">{report.name}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{report.type}</Badge>
                      </TableCell>
                      <TableCell>{report.date}</TableCell>
                      <TableCell>{getStatusBadge(report.status)}</TableCell>
                      <TableCell>{report.size}</TableCell>
                      <TableCell>
                        <div className="flex space-x-2">
                          {report.status === "Generated" && (
                            <>
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleDownload(report)}
                              >
                                <Download className="h-4 w-4" />
                              </Button>
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleViewReport(report)}
                              >
                                <Eye className="h-4 w-4" />
                              </Button>
                            </>
                          )}
                          {report.status === "Processing" && (
                            <Button variant="outline" size="sm" disabled>
                              Processing...
                            </Button>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
          <Card>
            <CardContent className="p-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900">24</p>
                <p className="text-sm text-gray-500">Reports Generated</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-blue-600">3</p>
                <p className="text-sm text-gray-500">Processing</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-green-600">45.2 MB</p>
                <p className="text-sm text-gray-500">Total Size</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-purple-600">12</p>
                <p className="text-sm text-gray-500">Scheduled</p>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Report Viewer Dialog */}
        <Dialog open={!!viewingReport} onOpenChange={() => setViewingReport(null)}>
          <DialogContent className="max-w-4xl max-h-[80vh]">
            <DialogHeader>
              <DialogTitle className="flex items-center justify-between">
                <span>{viewingReport?.name}</span>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleDownload(viewingReport)}
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
              </DialogTitle>
            </DialogHeader>
            <ScrollArea className="h-[60vh] w-full">
              <div className="p-4 bg-gray-50 rounded-lg">
                <pre className="whitespace-pre-wrap text-sm">
                  {viewingReport && generateReportContent(viewingReport)}
                </pre>
              </div>
            </ScrollArea>
          </DialogContent>
        </Dialog>
      </div>
    </ProtectedRoute>
  )
}